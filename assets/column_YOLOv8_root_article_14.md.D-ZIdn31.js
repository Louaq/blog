import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.DGMnJK1L.js";const E=JSON.parse('{"title":"报错","description":"","frontmatter":{},"headers":[],"relativePath":"column/YOLOv8_root/article_14.md","filePath":"column/YOLOv8_root/article_14.md","lastUpdated":1721651406000}'),t={name:"column/YOLOv8_root/article_14.md"},l=n(`<h1 id="报错" tabindex="-1">报错 <a class="header-anchor" href="#报错" aria-label="Permalink to &quot;报错&quot;">​</a></h1><h2 id="一、本文介绍" tabindex="-1">一、本文介绍 <a class="header-anchor" href="#一、本文介绍" aria-label="Permalink to &quot;一、本文介绍&quot;">​</a></h2><p>本文为专栏内读者和我个人在训练<strong>YOLOv8时遇到的各种错误解决方案</strong>，你遇到的问题本文基本上都能够解决。</p><h2 id="二、-报错问题" tabindex="-1">二、 报错问题 <a class="header-anchor" href="#二、-报错问题" aria-label="Permalink to &quot;二、 报错问题&quot;">​</a></h2><p># 以下为两个重要库的版本，大家可以对应下载，使用教程我会更新，时间还没来得及大家可以先看视频使用。</p><blockquote><p><strong>项目环境：</strong></p><p>python == 3.9.7</p><p>pytorch == 1.12.1</p><p>timm == 0.9.12</p><p>mmcv-full == 1.6.2</p></blockquote><hr><h3 id="_1-训练过程中loss出现nan值" tabindex="-1">(1)训练过程中loss出现Nan值. <a class="header-anchor" href="#_1-训练过程中loss出现nan值" aria-label="Permalink to &quot;(1)训练过程中loss出现Nan值.&quot;">​</a></h3><p>可以尝试关闭AMP混合精度训练，如何关闭amp呢找到如下文件&#39;ultralytics/cfg/default.yaml&#39;，其中有一个参数是</p><p>amp: False # (bool) Automatic Mixed Precision (AMP) training, choices=[True, False], True runs AMP check</p><p>我们将其设置为False即可，默认时为True。</p><p>.</p><h3 id="_2-多卡训练问题-修改模型以后不能支持多卡训练可以尝试下面的两行命令行操作-两个是不同的操作-是代表不同的版本现尝试第一个不行用第二个" tabindex="-1">(2)多卡训练问题,修改模型以后不能支持多卡训练可以尝试下面的两行命令行操作，两个是不同的操作，是代表不同的版本现尝试第一个不行用第二个 <a class="header-anchor" href="#_2-多卡训练问题-修改模型以后不能支持多卡训练可以尝试下面的两行命令行操作-两个是不同的操作-是代表不同的版本现尝试第一个不行用第二个" aria-label="Permalink to &quot;(2)多卡训练问题,修改模型以后不能支持多卡训练可以尝试下面的两行命令行操作，两个是不同的操作，是代表不同的版本现尝试第一个不行用第二个&quot;">​</a></h3><p>python -m torch.distributed.run --nproc_per_node 2 train.py</p><p>python -m torch.distributed.launch --nproc_per_node 2 train.py</p><hr><h3 id="_3-针对运行过程中的一些报错解决" tabindex="-1">(3) 针对运行过程中的一些报错解决 <a class="header-anchor" href="#_3-针对运行过程中的一些报错解决" aria-label="Permalink to &quot;(3) 针对运行过程中的一些报错解决&quot;">​</a></h3><p><strong>1.如果训练的过程中验证报错了(主要是一些形状不匹配的错误这是因为验证集的一些特殊图片导致)</strong></p><p>就是有这种训练第一个epochs完成后开始验证的时候报错，下面的方法基本百分之九十都能够解决。</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/e61c95278a244aebbe4ac67f07f90466.png" alt="" loading="lazy"></p><p>找到ultralytics/models/yolo/detect/train.py的DetectionTrainer class中的build_dataset函数中的rect=mode == &#39;val&#39;改为rect=False</p><p><strong>2.推理的时候运行detect.py文件报了形状不匹配的错误</strong></p><p>找到ultralytics/engine/predictor.py找到函数def pre_transform(self, im),在LetterBox中的auto改为False</p><p><strong>3.训练的过程中报错类型不匹配的问题</strong></p><p>找到&#39;ultralytics/engine/validator.py&#39;文件找到 &#39;class BaseValidator:&#39; 然后在其&#39;__call__&#39;中</p><p>self.args.half = self.device.type != &#39;cpu&#39;  # force FP16 val during training的一行代码下面加上self.args.half = False</p><hr><h3 id="_4-针对yaml文件中的nc修改" tabindex="-1">(4) 针对yaml文件中的nc修改 <a class="header-anchor" href="#_4-针对yaml文件中的nc修改" aria-label="Permalink to &quot;(4) 针对yaml文件中的nc修改&quot;">​</a></h3><p>不用修改，模型会自动根据你数据集的配置文件获取。</p><p>这也是模型打印两次的区别，第一次打印出来的就是你选择模型的yaml文件结构，第二次打印的就是替换了你数据集的yaml文件，模型使用的是第二种。</p><hr><h3 id="_5-针对环境的问题" tabindex="-1">(5) 针对环境的问题 <a class="header-anchor" href="#_5-针对环境的问题" aria-label="Permalink to &quot;(5) 针对环境的问题&quot;">​</a></h3><p>环境的问题我实在解决不过来，所以大家可以自行在网上搜索解决方案。</p><hr><h3 id="_6-训练过程中不打印gflops" tabindex="-1">(6) 训练过程中不打印GFLOpS <a class="header-anchor" href="#_6-训练过程中不打印gflops" aria-label="Permalink to &quot;(6) 训练过程中不打印GFLOpS&quot;">​</a></h3><p>计算的GFLOPs计算异常不打印，所以需要额外修改一处， 我们找到如下文件&#39;ultralytics/utils/torch_utils.py&#39;文件内有如下的代码按照如下的图片进行修改，大家看好函数就行，其中红框的640可能和你的不一样， 然后用我给的代码替换掉整个代码即可。</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/24068f6039b94ceeb91e98642c00e594.png" alt="" loading="lazy"></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_flops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, imgsz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">640</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;Return a YOLO model&#39;s FLOPs.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> de_parallel(model)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model.parameters())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # stride = max(int(model.stride.max()), 32) if hasattr(model, &#39;stride&#39;) else 32  # max stride</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stride </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 640</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        im </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> torch.empty((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stride, stride), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p.device)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># input image in BCHW format</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        flops </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thop.profile(deepcopy(model), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[im], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1E9</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # stride GFLOPs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        imgsz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgsz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imgsz, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [imgsz, imgsz]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># expand if int/float</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flops </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgsz[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stride </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgsz[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stride  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 640x640 GFLOPs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><hr><h3 id="_7-mmcv安装的解决方法" tabindex="-1">(7) mmcv安装的解决方法 <a class="header-anchor" href="#_7-mmcv安装的解决方法" aria-label="Permalink to &quot;(7) mmcv安装的解决方法&quot;">​</a></h3><p>有的读者mmcv-full会安装失败是因为自身系统的编译工具有问题，也有可能是环境之间安装的有冲突 推荐大家离线安装的形式,下面的地址中大家可以找找自己的版本,下载到本地进行安装。 <a href="https://download.openmmlab.com/mmcv/dist/cu111/torch1.8.0/index.html" target="_blank" rel="noreferrer">https://download.openmmlab.com/mmcv/dist/cu111/torch1.8.0/index.html</a> <a href="https://download.openmmlab.com/mmcv/dist/index.html" target="_blank" rel="noreferrer">https://download.openmmlab.com/mmcv/dist/index.html</a></p>`,41),e=[l];function p(h,r,k,d,o,c){return a(),i("div",null,e)}const m=s(t,[["render",p]]);export{E as __pageData,m as default};
