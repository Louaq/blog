import{_ as a,c as e,o as s,a5 as l}from"./chunks/framework.DGMnJK1L.js";const m=JSON.parse('{"title":"评估","description":"","frontmatter":{},"headers":[],"relativePath":"column/YOLOv8_root/article_11.md","filePath":"column/YOLOv8_root/article_11.md","lastUpdated":1719498573000}'),o={name:"column/YOLOv8_root/article_11.md"},r=l('<h1 id="评估" tabindex="-1">评估 <a class="header-anchor" href="#评估" aria-label="Permalink to &quot;评估&quot;">​</a></h1><h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;">​</a></h2><p>这篇博客，<strong>主要给大家讲解我们在训练yolov8时生成的结果文件中各个图片及其中指标的含义</strong>，帮助大家更深入的理解，以及我们在评估模型时和发表论文时主要关注的参数有那些。本文通过举例训练过程中的某一时间的结果来帮助大家理解，大家阅读过程中如有任何问题可以在评论区提问出来，我会帮助大家解答。首先我们来看一个在一次训练完成之后都能生成多少个文件如下图所示，下面的文章讲解都会围绕这个结果文件来介绍。</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/bdf99b744c6646f6a82b2be30e3e9d92.png" alt="" loading="lazy"></p><hr><h2 id="二、评估用的数据集" tabindex="-1"><strong>二、评估用的数据集</strong> <a class="header-anchor" href="#二、评估用的数据集" aria-label="Permalink to &quot;**二、评估用的数据集**&quot;">​</a></h2><blockquote><p>上面的训练结果，是根据一个检测飞机的数据集训练得来，其中只有个标签就是飞机，对于这种单标签的数据集，其实我们可以将其理解为一个二分类任务，</p><p><strong>一种情况-&gt;检测为飞机，另一种情况-&gt;不是飞机。</strong></p></blockquote><hr><h2 id="三、结果分析" tabindex="-1">三、结果分析 <a class="header-anchor" href="#三、结果分析" aria-label="Permalink to &quot;三、结果分析&quot;">​</a></h2><p>我们可以从结果文件中看到其中<strong>共有文件24个</strong>，后12张图片是根据我们训练过程中的一些检测结果图片，用于我们可以观察检测结果，有哪些被检测出来了，那些没有被检测出来，其不作为指标评估的文件。</p><h3 id="weights文件夹" tabindex="-1">Weights文件夹 <a class="header-anchor" href="#weights文件夹" aria-label="Permalink to &quot;Weights文件夹&quot;">​</a></h3><p>我们先从第一个weights文件夹来分析，其中有两个文件，分别是<strong>best.pt、last.pt</strong>,其分别为训练过程中的损失最低的结果和模型训练的最后一次结果保存的模型。</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/3986c306bb3b4e9893da7f89d2994a88.png" alt="" loading="lazy"></p><h3 id="args-yaml" tabindex="-1">args.yaml <a class="header-anchor" href="#args-yaml" aria-label="Permalink to &quot;args.yaml&quot;">​</a></h3><p>第二个文件是args.yaml文件,其中主要保存一些我们训练时指定的参数，内容如下所示。</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/f464e438dd6f4f0a9c52e7246439295c.png" alt="" loading="lazy"></p><h3 id="混淆矩阵-confusionmatrix" tabindex="-1">混淆矩阵(ConfusionMatrix) <a class="header-anchor" href="#混淆矩阵-confusionmatrix" aria-label="Permalink to &quot;混淆矩阵(ConfusionMatrix)&quot;">​</a></h3><p>第三个文件就是混淆矩阵，大家都应该听过这个名字，其是一种用于评估分类模型性能的表格形式。它以实际类别（真实值）和模型预测类别为基础，将样本分类结果进行统计和汇总。</p><blockquote><p>对于二分类问题，混淆矩阵通常是一个2×2的矩阵，包括真阳性（True Positive, TP）、真阴性（True Negative, TN）、假阳性（False Positive, FP）和假阴性（False Negative, FN）四个元素。</p></blockquote><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/ae117a5a660142f3a44b52834fa04ec3.png" alt="" loading="lazy"></p><div class="language-cobol vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cobol</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">True_Label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1 ,0, 1, 0 , 1 , 0, 0 , 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]Predict_Label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1 ,0 , 0 , 1 , 0, 0 , 1, 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们来分析这个图，其每个格子代表的含义我在图片上标注了出来**,下面我们来拿一个例子来帮助大家来理解这个混淆矩阵。**</p><p>假设我们的数据集预测为飞机标记为数字0、预测不为飞机标记为1，<strong>现在假设我们在模型的训练的某一批次种预测了20次其真实结果和预测结果如下所示。</strong></p><p>其中True_Label代表真实的标签，Predict_Label代表我们用模型预测的标签。</p><p>那么我们可以进行对比产生如下分析</p><blockquote><ul><li>6个样本的真实标签和预测标签都是0（真阴性，True Negative）。</li><li>1个样本的真实标签是0，但预测标签是1（假阳性，False Positive）。</li><li>8个样本的真实标签是1，但预测标签是0（假阴性，False Negative）。</li><li>5个样本的真实标签和预测标签都是1（真阳性，True Positive）。</li></ul></blockquote><p>下面根据我们的分析结果，我们就能够画出这个预测的混淆矩阵，</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/36c503208f654d06a1ad585e772364a8.png" alt="" loading="lazy"></p><p>由此我们就能得到那一批次的混淆矩阵，<strong>我们的最终结果生成的混淆矩阵可以理解为多个混淆矩阵的统计结果。</strong></p><h3 id="混淆矩阵归一化-confusion-matrix-normal" tabindex="-1">混淆矩阵归一化(Confusion Matrix Normal) <a class="header-anchor" href="#混淆矩阵归一化-confusion-matrix-normal" aria-label="Permalink to &quot;混淆矩阵归一化(Confusion Matrix Normal)&quot;">​</a></h3><p>这个混淆矩阵的归一化，就是对混淆矩阵做了一个归一化处理，对混淆矩阵进行归一化可以将每个单元格的值除以该类别实际样本数，从而得到表示分类准确率的百分比。这种标准化使得我们可以直观地比较类别间的分类准确率，并识别出模型在哪些类别上表现较好或较差。</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/4642ed3defe146a3b93999ffbd5d5129.png" alt="" loading="lazy"></p><p><strong>我们可以看到是对于列进行了归一化处理，0.9 + 0.1 = 1，1 + 0 = 1。</strong></p><h3 id="计算map、precision、recall" tabindex="-1"><strong>计算mAP、Precision、Recall</strong> <a class="header-anchor" href="#计算map、precision、recall" aria-label="Permalink to &quot;**计算mAP、Precision、Recall**&quot;">​</a></h3><p>在讲解其它的图片之前我们需要来计算三个比较重要的参数，这是其它图片的基础，这里的计算还是利用上面的某一批次举例的分析结果。</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/09e2217c78ab4e6ab49eeb2b8f128fed.png" alt="" loading="lazy"></p><ol><li><p>精确度（Precision）：<strong>预测为正的样本中有多少是正确的</strong>，Precision = TP / (TP + FP) = 5 / (5 + 1) = 5/6 ≈ 0.833</p></li><li><p>召回率（Recall）：真实为正的样本中有多少被正确预测为正，Recall = TP / (TP + FN) = 5 / (5 + 8) ≈ 0.385</p></li><li><p>F1值（F1-Score）：**综合考虑精确度和召回率的指标，**F1 = 2 * (Precision * Recall) / (Precision + Recall) = 2 * (0.833 * 0.385) / (0.833 + 0.385) ≈ 0.526</p></li><li><p>准确度（Accuracy）：**所有样本中模型正确预测的比例，**Accuracy = (TP + TN) / (TP + TN + FP + FN) = (5 + 6) / (5 + 6 + 1 + 8) ≈ 0.565</p></li><li><p>平均精确度（Average Precision, AP）：**用于计算不同类别的平均精确度，对于二分类问题，AP等于精确度。**AP = Precision = 0.833</p></li><li><p>平均精确度（Mean Average Precision, mAP）：<strong>多类别问题的平均精确度，对于二分类问题，mAP等于AP（精确度）</strong>，所以mAP = AP = 0.833</p></li></ol><p>这里需要讲解的主要是AP和MAP如果是多分类的问题，AP和mAP怎么计算，首先我们要知道AP的全称就是Average Precision，平均精度所以我们AP的计算公式如下？</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/5a9f270d50ce4bbfb76e800f4553200c.png" alt="" loading="lazy"></p><p>mAP就是Mean Average Precision，计算如下，计算每一个没别的AP进行求平均值处理就是mAP。</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/a7ef1cd0cb924112acfa07084524a7a8.png" alt="" loading="lazy"></p><h3 id="f1-curve" tabindex="-1">F1_Curve <a class="header-anchor" href="#f1-curve" aria-label="Permalink to &quot;F1\\_Curve&quot;">​</a></h3><p>F1_Curve这个文件，我们点击去的图片的标题是F1-Confidence Curve它显示了在不同分类阈值下的F1值变化情况。</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/97f8c2e20dd24d59a954bd43c4644c0f.png" alt="" loading="lazy"></p><p>我们可以这么理解，先看它的横纵坐标，横坐标是置信度，纵坐标是F1-Score，F1-Score在前面我们以及讲解过了，那什么是置信度？</p><p>**置信度(Confidence)-&gt;**在我们模型的识别过程中会有一个概率，就是模型判定一个物体并不是百分百判定它是属于某一个分类，它会给予它以个概率，Confidence就是我们设置一个阈值，如果超过这个概率那么就确定为某一分类，<strong>假如我模型判定一个物体由0.7的概率属于飞机，此时我们设置的阈值如果为0.7以下那么模型就会输出该物体为飞机，如果我们设置的阈值大于0.7那么模型就不会输出该物体为飞机。</strong></p><p><strong>F1-Confidence Curve就是随着F1-Score随着Confience的逐渐增高而变化的一个曲线。</strong></p><h3 id="labels" tabindex="-1">Labels <a class="header-anchor" href="#labels" aria-label="Permalink to &quot;Labels&quot;">​</a></h3><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/521ff0b11be64fcbbbd711c3de43ddcd.jpeg" alt="" loading="lazy"></p><p>Labels图片代表每个检测到的目标的类别和边界框信息。每个目标都由一个矩形边界框和一个类别标签表示，<strong>我们逆时针来看这个图片！！！</strong></p><ol><li>目标类别：该像素点所检测到的目标类别，例如飞机等。</li><li>目标位置：该像素点所检测到的目标在图像中的位置，即该像素点在图像中的坐标。</li><li>目标大小：该像素点所检测到的目标的大小，即该像素点所覆盖的区域的大小。</li><li>其他信息：例如目标的旋转角度等其他相关信息。</li></ol><h3 id="labels-correlogram" tabindex="-1">labels_correlogram <a class="header-anchor" href="#labels-correlogram" aria-label="Permalink to &quot;labels\\_correlogram&quot;">​</a></h3><p>labels_correlogram是一个在**机器学习领域中使用的术语，**它指的是一种图形，<strong>用于显示目标检测算法在训练过程中预测标签之间的相关性</strong>。</p><p>具体来说，labels_correlogram是一张<strong>颜色矩阵图</strong>，它展示了训练集数据标签之间的相关性。它可以帮助我们理解目标检测算法在训练过程中的行为和表现，以及预测标签之间的相互影响。</p><p>通过观察labels_correlogram，我们可以了解到目标检测算法在不同类别之间的区分能力，以及对于不同类别的预测精度。此外，我们还可以通过比较不同算法或不同数据集labels_correlogram，来评估算法的性能和数据集的质量。</p><p>总之，labels_correlogram是一种有用的工具，可以帮助我们更好地理解目标检测算法在训练过程中的行为和表现，以及评估算法的性能和数据集的质量。</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/0f1e5f82a532423dae3a4e8b897e6165.jpeg" alt="" loading="lazy"></p><h3 id="p-curve" tabindex="-1">P_curve <a class="header-anchor" href="#p-curve" aria-label="Permalink to &quot;P\\_curve&quot;">​</a></h3><p>这个图的分析和F1_Curve一样，不同的是关于的是Precision和Confidence之间的关系，<strong>可以看出我们随着置信度的越来越高检测的准确率按理来说是越来越高的。</strong></p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/7ac794c6f34b418c95dfc7951382171c.png" alt="" loading="lazy"></p><h3 id="r-curve" tabindex="-1">R_curve <a class="header-anchor" href="#r-curve" aria-label="Permalink to &quot;R\\_curve&quot;">​</a></h3><p>这个图的分析和F1_Curve一样，不同的是关于的是Recall和Confidence之间的关系，<strong>可以看出我们随着置信度的越来越高召回率的准确率按理来说是越来越低的。</strong></p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/e72c4546e65d445c9831567e12d55df0.png" alt="" loading="lazy"></p><h3 id="pr-curve" tabindex="-1">PR_curve <a class="header-anchor" href="#pr-curve" aria-label="Permalink to &quot;PR\\_curve&quot;">​</a></h3><p>它显示了在不同分类阈值下模型的精确度（Precision）和召回率（Recall）之间的关系。</p><p><strong>PR曲线越靠近坐标轴的右上角，模型性能越好，越能够正确识别正样本，正确分类正样本的Precision值越高，而靠近右侧则说明模型对正样本的识别能力较差，即召回能力较差。</strong></p><blockquote><p>PR曲线的特点是随着分类阈值的变化，精确度和召回率会有相应的改变。通常情况下，当分类模型能够同时保持较高的精确度和较高的召回率时，PR曲线处于较高的位置。当模型偏向于高精确度或高召回率时，曲线则相应地向低精确度或低召回率的方向移动。</p><p>PR曲线可以帮助我们评估模型在不同阈值下的性能，并选择适当的阈值来平衡精确度和召回率。对于模型比较或选择，我们可以通过比较PR曲线下方的面积（称为平均精确度均值，Average Precision, AP）来进行定量评估。AP值越大，模型的性能越好。</p><p>总结：PR曲线是一种展示分类模型精确度和召回率之间关系的可视化工具，通过绘制精确度-召回率曲线，我们可以评估和比较模型在不同分类阈值下的性能，并计算平均精确度均值（AP）来定量衡量模型的好坏。</p></blockquote><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/c00378b5866f44978bf907f4b92d6a2c.png" alt="" loading="lazy"></p><h3 id="results-csv" tabindex="-1">results.csv <a class="header-anchor" href="#results-csv" aria-label="Permalink to &quot;results.csv&quot;">​</a></h3><p>results.csv记录了一些我们训练过程中的参数信息，包括损失和学习率等，这里没有什么需要理解大家可以看一看，我们后面的results图片就是根据这个文件绘画出来的。</p><h3 id="results" tabindex="-1"><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/9af828676f704aada0b9b18797ba75ce.png" alt="" loading="lazy">results <a class="header-anchor" href="#results" aria-label="Permalink to &quot;![](https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/9af828676f704aada0b9b18797ba75ce.png)results&quot;">​</a></h3><p>这个图片就是生成结果的最后一个了，我们可以看出其中标注了许多小的图片包括训练过程在的各种损失，我们主要看的其实就是后面的四幅图mAP50、mAP50-95、metrics/precision、metrics/recall四张图片。</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/0108b195b2e04b46811b44dc9f5f351f.png" alt="" loading="lazy"></p><blockquote><ol><li>mAP50：mAP是mean Average Precision的缩写，表示在多个类别上的平均精度。mAP50表示在50%的IoU阈值下的mAP值。</li><li>mAP50-95：这是一个更严格的评价指标，它计算了在50-95%的IoU阈值范围内的mAP值，然后取平均。这能够更准确地评估模型在不同IoU阈值下的性能。</li><li>metrics/precision：精度（Precision）是评估模型预测正确的正样本的比例。在目标检测中，如果模型预测的边界框与真实的边界框重合，则认为预测正确。</li><li>metrics/recall：召回率（Recall）是评估模型能够找出所有真实正样本的比例。在目标检测中，如果真实的边界框与预测的边界框重合，则认为该样本被正确召回。</li></ol></blockquote><h3 id="检测效果图" tabindex="-1">检测效果图 <a class="header-anchor" href="#检测效果图" aria-label="Permalink to &quot;检测效果图&quot;">​</a></h3><p>最后的十四张图片就是检测效果图了，给大家看一下这里没什么好讲解的了。</p><p><img src="https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/7dbceef24f184435b49dd7480b2cc2b3.jpeg" alt="" loading="lazy"></p><hr><h2 id="四、其它参数" tabindex="-1">四、其它参数 <a class="header-anchor" href="#四、其它参数" aria-label="Permalink to &quot;四、其它参数&quot;">​</a></h2><p>FPS和IoU是目标检测领域中使用的两个重要指标，分别表示每秒处理的图片数量和交并比。</p><blockquote><ol><li>FPS：全称为Frames Per Second，即每秒帧率。它用于评估模型在给定硬件上的处理速度，即每秒可以处理的图片数量。该指标对于实现实时检测非常重要，因为只有处理速度快，才能满足实时检测的需求。</li><li>IoU：全称为Intersection over Union，表示交并比。在目标检测中，它用于衡量模型生成的候选框与原标记框之间的重叠程度。IoU值越大，表示两个框之间的相似性越高。通常，当IoU值大于0.5时，认为可以检测到目标物体。这个指标常用于评估模型在特定数据集上的检测准确度。</li></ol></blockquote><p>在目标检测领域中，处理速度和准确度是两个重要的性能指标。在实际应用中，我们需要根据具体需求来平衡这两个指标。</p>',82),i=[r];function n(t,c,p,g,h,d){return s(),e("div",null,i)}const b=a(o,[["render",n]]);export{m as __pageData,b as default};
